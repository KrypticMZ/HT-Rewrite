package me.htrewrite.client.module.modules.exploit;

import me.htrewrite.client.event.custom.player.PlayerUpdateEvent;
import me.htrewrite.client.module.Module;
import me.htrewrite.client.module.ModuleType;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.math.Vec3d;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.HashMap;

public class CoordExploitModule extends Module {
    private HashMap<Entity, Vec3d> knownPlayers = new HashMap<>();
    private HashMap<String, Vec3d> tpdPlayers = new HashMap<>();
    private int numTicks = 0;
    private int numForgetTicks = 0;
    public CoordExploitModule() {
        super("CoordExploit", "Find where did someone tp to.", ModuleType.Exploits, 0);
        endOption();
    }

    @EventHandler
    private Listener<PlayerUpdateEvent> updateEventListener = new Listener<>(event -> {
        if(numTicks >= 50) {
            numTicks = 0;
            for(final Entity entity : mc.world.loadedEntityList) {
                if(entity instanceof EntityPlayer && !entity.getName().contentEquals(mc.player.getName())) {
                    final Vec3d playerPos = new Vec3d(entity.posX, entity.posY, entity.posZ);
                    if(knownPlayers.containsKey(entity)) {
                        if(Math.abs(knownPlayers.get(entity).distanceTo(playerPos)) > 50
                                && Math.abs(mc.player.getPositionVector().distanceTo(playerPos)) > 100.0
                                && (!tpdPlayers.containsKey(entity.getName())
                                && tpdPlayers.get(entity.getName()) != playerPos)) {
                            String vectorString = vectorToString(playerPos, false);
                            sendMessage(entity.getName() + " has tp'd to " + vectorString);
                            saveFile(vectorString, entity.getName());
                            knownPlayers.remove(entity);
                            tpdPlayers.put(entity.getName(), playerPos);
                        }
                    }
                    knownPlayers.put(entity, playerPos);
                }
            }
        }
        if(numForgetTicks >= 9000000)
            tpdPlayers.clear();
        ++numTicks;
        ++numForgetTicks;
    });

    public static String vectorToString(final Vec3d vector, final boolean includeY) {
        final StringBuilder builder = new StringBuilder();
        builder.append('(');
        builder.append((int)Math.floor(vector.x));
        builder.append(", ");
        if (includeY) {
            builder.append((int)Math.floor(vector.y));
            builder.append(", ");
        }
        builder.append((int)Math.floor(vector.z));
        builder.append(")");
        return builder.toString();
    }

    public void saveFile(String pos, String name) {
        try {
            File file = new File("./htRewrite/coord_exploit.txt");
            file.getParentFile().mkdirs();
            PrintWriter writer = new PrintWriter(new FileWriter(file, true));
            writer.println("name: " + name + " coords: " + pos);
            writer.close();
        } catch (Exception exception) {}
    }
}