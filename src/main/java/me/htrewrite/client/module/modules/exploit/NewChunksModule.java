package me.htrewrite.client.module.modules.exploit;

import me.htrewrite.client.event.custom.CustomEvent;
import me.htrewrite.client.event.custom.networkmanager.NetworkPacketEvent;
import me.htrewrite.client.event.custom.render.RenderEvent;
import me.htrewrite.client.module.Module;
import me.htrewrite.client.module.ModuleType;
import me.htrewrite.salimports.util.RenderUtil;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.client.renderer.culling.ICamera;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.util.math.AxisAlignedBB;

import java.util.ArrayList;
import java.util.List;

public class NewChunksModule extends Module {
    private ICamera camera;
    private List<int[]> chunks;

    public NewChunksModule() {
        super("NewChunks", "Renders a box on new chunks.", ModuleType.Exploits, 0);
        endOption();

        camera = new Frustum();
        chunks = new ArrayList<>();
    }

    @EventHandler
    private Listener<NetworkPacketEvent> packetEventListener = new Listener<>(event -> {
        if(!(event.getPacket() instanceof SPacketChunkData && event.reading && event.getEra() == CustomEvent.Era.PRE))
            return;

        final SPacketChunkData packet = (SPacketChunkData)event.getPacket();
        if(!packet.isFullChunk()) {
            int[] chunkPos = {packet.getChunkX()*16, packet.getChunkZ()*16};
            if(!chunks.contains(chunkPos))
                chunks.add(chunkPos);
        }
    });

    @EventHandler
    private Listener<RenderEvent> renderEventListener = new Listener<>(event -> {
        if(mc.getRenderViewEntity() == null)
            return;

        for(int[] chunkPos : chunks) {
            camera.setPosition(mc.getRenderViewEntity().posX, mc.getRenderViewEntity().posY, mc.getRenderViewEntity().posZ);
            if(camera.isBoundingBoxInFrustum(new AxisAlignedBB(chunkPos[0], 0, chunkPos[1], chunkPos[0] + 16, 1, chunkPos[1] + 16)))
                RenderUtil.drawPlane(
                        chunkPos[0] - mc.getRenderManager().viewerPosX,
                        -mc.getRenderManager().viewerPosY,
                        chunkPos[1] - mc.getRenderManager().viewerPosZ,
                        new AxisAlignedBB(0, 0, 0, 16, 1, 16), 1, 0xFF9900EE);
        }
    });
}