package me.htrewrite.client.module.modules.exploit;

import me.htrewrite.client.event.custom.CustomEvent;
import me.htrewrite.client.event.custom.networkmanager.NetworkPacketEvent;
import me.htrewrite.client.event.custom.player.PlayerUpdateEvent;
import me.htrewrite.client.module.Module;
import me.htrewrite.client.module.ModuleType;
import me.htrewrite.exeterimports.mcapi.settings.ValueSetting;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.SPacketMaps;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.world.storage.MapData;

public class CoordExploit2Module extends Module {
    public static final ValueSetting<Double> packetsTick = new ValueSetting<>("PacketPerTick", 2d, 0d, 5d);

    public CoordExploit2Module() {
        super("CoordExploit2", "Map coord exploit. (PlayerFinder).", ModuleType.Exploits, 0);
        addOption(packetsTick);
        endOption();
    }

    @EventHandler
    private Listener<PlayerUpdateEvent> updateEventListener = new Listener<>(event -> {
        if(mc.player.inPortal && mc.player.getRidingEntity() instanceof EntityBoat) {
            if(mc.player.inventory.getCurrentItem().getItem().equals(Items.MAP))
                mc.player.connection.sendPacket(new CPacketPlayerTryUseItemOnBlock(mc.player.getPosition(), EnumFacing.UP, EnumHand.MAIN_HAND, 0, -1337.77f, 0));

            for(int i = 0; i < packetsTick.getValue().intValue(); i++) {
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, -1337.77d, mc.player.posZ, false));
                mc.player.connection.sendPacket(new CPacketSteerBoat(false, true));
            }
        }
        for(Entity entity : mc.world.playerEntities)
            if(!entity.getName().equalsIgnoreCase(mc.player.getName()))
                sendMessage("Player found! [" + entity.getPosition().getX() + ", " + entity.getPosition().getY() + "]");
    });

    @EventHandler
    private Listener<NetworkPacketEvent> packetEventListener = new Listener<>(event -> {
        if(event.reading && event.getEra() == CustomEvent.Era.PRE && event.getPacket() instanceof SPacketMaps) /* Packet Reading */
            ((SPacketMaps) event.getPacket()).setMapdataTo(new MapData("Ooops, I think I got ur coords..."));
        if(!event.reading && event.getEra() == CustomEvent.Era.PRE && (event.getPacket() instanceof CPacketConfirmTeleport || event.getPacket() instanceof CPacketPlayerTryUseItem)) /* Packet Writing */
            event.cancel();
    });
}