package me.htrewrite.client.module.modules.exploit;

import me.htrewrite.client.event.custom.networkmanager.NetworkPacketEvent;
import me.htrewrite.client.module.Module;
import me.htrewrite.client.module.ModuleType;
import me.htrewrite.exeterimports.mcapi.settings.ToggleableSetting;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;

public class PacketCancellerModule extends Module {
    public static final ToggleableSetting packetInput = new ToggleableSetting("CPacketInput", null, false);
    public static final ToggleableSetting packetPlayer = new ToggleableSetting("CPacketPlayer", null, true);
    public static final ToggleableSetting packetEntityAction = new ToggleableSetting("CPacketEntityAction", null, false);
    public static final ToggleableSetting packetUseEntity = new ToggleableSetting("CPacketUseEntity", null, false);
    public static final ToggleableSetting packetVehicleMove = new ToggleableSetting("CPacketVehicleMove", null, false);
    public static final ToggleableSetting packetSteerBoat = new ToggleableSetting("CPacketSteerBoat", null, false);

    public PacketCancellerModule() {
        super("PacketCanceller", "Cancels packets.", ModuleType.Exploits, 0);
        addOption(packetInput);
        addOption(packetPlayer);
        addOption(packetEntityAction);
        addOption(packetUseEntity);
        addOption(packetVehicleMove);
        addOption(packetSteerBoat);
        endOption();
    }

    @EventHandler
    private Listener<NetworkPacketEvent> packetEventListener = new Listener<>(event -> {
        Packet packet = event.getPacket();
        if((packet instanceof CPacketInput) && packetInput.isEnabled())
            event.cancel();
        if((packet instanceof CPacketPlayer) && packetPlayer.isEnabled())
            event.cancel();
        if((packet instanceof CPacketEntityAction) && packetEntityAction.isEnabled())
            event.cancel();
        if((packet instanceof CPacketUseEntity) && packetUseEntity.isEnabled())
            event.cancel();
        if((packet instanceof CPacketVehicleMove) && packetVehicleMove.isEnabled())
            event.cancel();
        if((packet instanceof CPacketSteerBoat) && packetSteerBoat.isEnabled())
            event.cancel();
    });
}